/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /sources/swbis/swbis/swsupplib/sw_parse/swlex.c.20090711,v 1.1 2009/07/11 21:46:43 jhlowe Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 26
#define YY_END_OF_BUFFER 27
static yyconst short int yy_accept[119] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   15,   15,
        0,    0,    0,    0,    0,    0,   27,    1,   26,   20,
       24,   21,   23,   23,   19,    1,   26,    2,    1,   10,
       10,    7,   12,   11,    3,    1,    9,    8,    1,   26,
        1,   26,    5,   26,   16,   17,   18,    1,   15,   13,
       26,   14,   26,   26,   25,   20,   24,   21,   21,   23,
       23,   23,   23,   19,    0,    2,    0,   12,   12,    0,
        6,    4,    0,    5,    0,   16,   16,   17,   18,   15,
       13,    0,   14,    0,    0,    0,    0,   23,   23,    0,

       23,   23,    0,    0,   23,    0,   23,   23,    0,    0,
        0,   22,   23,   23,    0,   22,   23,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    5,    2,    6,    7,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    8,    9,    2,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    2,    2,   11,
       12,    2,    2,    2,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        2,    2,    2,    2,   14,    2,   13,   13,   13,   15,

       16,   13,   13,   13,   13,   13,   13,   13,   13,   17,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    2,    2,    2,    2,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18
    } ;

static yyconst int yy_meta[19] =
    {   0,
        1,    1,    2,    3,    2,    1,    4,    5,    6,    5,
        1,    7,    5,    5,    5,    5,    5,    1
    } ;

static yyconst short int yy_base[144] =
    {   0,
        0,   16,   21,   39,   57,   75,   93,  111,  129,  147,
      165,  183,  201,  219,  237,    0,  253,    0,  265,  283,
      299,    0,   19,   23,  315,  333,  102,  607,  607,  349,
      607,   97,   15,  349,   23,   94,   92,  607,  607,  607,
       90,  607,    0,  607,  607,  607,  607,  607,   25,   26,
       27,   31,  607,   84,   39,   91,  607,    0,    0,   43,
      364,  607,   88,   74,  607,    0,  607,   86,   85,    0,
       41,  364,  367,    0,   82,  607,   80,    0,    0,   47,
      607,  607,   48,  607,   73,   56,   62,   75,  607,    0,
       66,    0,  607,   73,   70,   55,    0,  375,  385,   68,

        0,  401,  414,   61,  424,  434,  447,  462,   52,   79,
       49,  607,    0,    0,  477,  607,    0,  607,  482,  489,
      496,  503,  510,  517,  524,  531,   42,  538,  544,  548,
      555,  562,  568,  574,  577,  584,   38,  587,  589,   31,
      591,  597,  603
    } ;

static yyconst short int yy_def[144] =
    {   0,
      118,    1,  119,  119,  120,  120,  121,  121,  122,  122,
      123,  123,  124,  124,  121,   15,   15,   17,  125,  125,
       17,   21,  121,  121,  121,  121,  118,  118,  118,  118,
      118,  126,  127,  127,   30,  128,  128,  118,  118,  118,
      129,  118,  130,  118,  118,  118,  118,  118,  131,  131,
      132,  132,  118,  133,  118,  134,  118,  135,  135,  118,
      118,  118,  136,  118,  118,   30,  118,  126,  126,  137,
      138,  139,  139,   35,  128,  118,  129,  130,  130,  131,
      118,  118,  132,  118,  133,  118,  118,  134,  118,  135,
      118,   61,  118,  136,  136,  118,  140,  141,  118,  142,

      140,  118,   99,  103,  103,  103,   99,   99,  142,  142,
      143,  118,  102,  106,  103,  118,  108,    0,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118
    } ;

static yyconst short int yy_nxt[626] =
    {   0,
       28,   29,   30,   31,   30,   29,   32,   29,   29,   29,
       29,   29,   33,   33,   33,   34,   33,   28,   35,   28,
       35,   36,   70,   28,   71,   74,   38,   74,   81,   81,
       84,   82,   82,   84,   84,  101,   28,   84,   36,   36,
       28,   87,   70,   87,   38,   91,   72,   91,   70,   97,
       81,   84,  112,   82,   84,   93,   36,   39,   87,   41,
       87,   41,   42,   43,   87,  104,   87,   44,   91,  100,
       91,   93,  110,   93,   39,   39,   93,   41,   89,   41,
       42,   43,   93,  110,   86,   44,   78,   76,   67,   67,
       96,   93,   39,   28,   89,   86,   78,   76,   45,   76,

       67,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       28,   28,  118,  118,  118,  118,   45,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   28,   46,
      118,  118,  118,  118,   48,  118,  118,  118,  118,   29,
      118,  118,  118,  118,  118,  118,   46,   46,  118,  118,
      118,  118,   48,  118,  118,  118,  118,   29,  118,  118,
      118,  118,  118,  118,   46,   49,  118,  118,   29,  118,
      118,   29,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,   49,   49,  118,  118,   29,  118,  118,   29,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

       49,   51,  118,  118,   53,  118,  118,   53,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   51,   51,
      118,  118,   53,  118,  118,   53,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   51,   28,  118,   54,
      118,   54,  118,  118,  118,  118,  118,  118,   55,  118,
      118,  118,  118,  118,   28,   56,   57,   56,  118,  118,
      118,  118,  118,  118,   29,   58,  118,   60,   29,   60,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,   58,   58,  118,   60,   29,   60,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

       58,   61,   62,   61,  118,   63,  118,  118,  118,  118,
      118,  118,  118,  118,   64,   28,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   65,  118,
      118,  118,   28,   28,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   65,  118,  118,  118,
       28,   66,   67,   66,  118,   68,   70,  118,   71,  118,
      118,  118,  118,  118,  118,   73,   92,   93,   92,  118,
       94,   70,   97,   71,   70,   97,   71,  118,  118,  118,
      118,   99,   70,   97,   71,  103,  103,  103,   67,  104,
      103,  103,  105,  106,  107,  103,  103,  108,  108,  108,

      108,  108,  103,  111,  112,  111,  118,  118,   70,   97,
      113,  118,  118,  113,  113,  113,  113,  113,  103,  118,
      118,  103,  103,  103,  118,  118,  103,  103,  103,  103,
      103,  105,  118,  105,  118,  118,  105,  105,  105,  105,
      105,  114,  118,  114,  118,  118,  114,  114,  114,  114,
      114,  103,  118,  118,  118,  118,  118,  118,  118,  107,
      107,  107,  107,  107,  115,  116,  115,  118,  118,  118,
      118,  117,  118,  118,  117,  117,  117,  117,  117,  115,
      116,  115,   37,   37,   37,   37,   37,   37,   37,   40,
       40,   40,   40,   40,   40,   40,   29,   29,   29,   29,

       29,   29,   29,   47,   47,   47,   47,   47,   47,   47,
       50,   50,   50,   50,   50,   50,   50,   52,   52,   52,
       52,   52,   52,   52,   59,   59,   59,   59,   59,   59,
       59,   69,   69,   69,   69,   69,   69,   69,   75,   75,
       75,   75,   75,   75,   75,   77,  118,   77,   79,   79,
      118,   79,   79,   79,   79,   80,   80,   80,   80,   80,
       80,   80,   83,   83,   83,   83,   83,   83,   83,   85,
      118,  118,  118,  118,   85,   88,   88,   90,  118,  118,
       90,   90,   90,   90,   95,   95,   95,   95,   95,   95,
       95,   71,   71,   98,   98,  102,  102,  109,  109,  109,

      109,  109,  109,  109,  111,  111,   27,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118
    } ;

static yyconst short int yy_chk[626] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,   23,
        2,    3,   33,   24,   33,   35,    3,   35,   49,   50,
       51,   49,   50,   51,   52,  140,   23,   52,    3,    4,
       24,   55,  137,   55,    4,   60,  127,   60,   71,   71,
       80,   83,  111,   80,   83,  109,    4,    5,   86,    5,
       86,    5,    5,    5,   87,  104,   87,    5,   91,   96,
       91,  100,  100,   95,    5,    6,   94,    6,   88,    6,
        6,    6,  110,  110,   85,    6,   77,   75,   69,   68,
       64,   63,    6,    7,   56,   54,   41,   37,    7,   36,

       32,   27,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    8,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    8,    9,
        0,    0,    0,    0,    9,    0,    0,    0,    0,    9,
        0,    0,    0,    0,    0,    0,    9,   10,    0,    0,
        0,    0,   10,    0,    0,    0,    0,   10,    0,    0,
        0,    0,    0,    0,   10,   11,    0,    0,   11,    0,
        0,   11,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   11,   12,    0,    0,   12,    0,    0,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       12,   13,    0,    0,   13,    0,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   13,   14,
        0,    0,   14,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,   15,    0,   15,
        0,   15,    0,    0,    0,    0,    0,    0,   15,    0,
        0,    0,    0,    0,   15,   17,   17,   17,    0,    0,
        0,    0,    0,    0,   17,   19,    0,   19,   19,   19,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   19,   20,    0,   20,   20,   20,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       20,   21,   21,   21,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,   21,   25,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   25,    0,
        0,    0,   25,   26,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,    0,    0,    0,
       26,   30,   30,   30,    0,   30,   34,    0,   34,    0,
        0,    0,    0,    0,    0,   34,   61,   61,   61,    0,
       61,   72,   72,   72,   73,   73,   73,    0,    0,    0,
        0,   73,   98,   98,   98,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,  102,  102,  102,    0,    0,  102,  102,
      102,    0,    0,  102,  102,  102,  102,  102,  103,    0,
        0,  103,  103,  103,    0,    0,  103,  103,  103,  103,
      103,  105,    0,  105,    0,    0,  105,  105,  105,  105,
      105,  106,    0,  106,    0,    0,  106,  106,  106,  106,
      106,  107,    0,    0,    0,    0,    0,    0,    0,  107,
      107,  107,  107,  107,  108,  108,  108,    0,    0,    0,
        0,  108,    0,    0,  108,  108,  108,  108,  108,  115,
      115,  115,  119,  119,  119,  119,  119,  119,  119,  120,
      120,  120,  120,  120,  120,  120,  121,  121,  121,  121,

      121,  121,  121,  122,  122,  122,  122,  122,  122,  122,
      123,  123,  123,  123,  123,  123,  123,  124,  124,  124,
      124,  124,  124,  124,  125,  125,  125,  125,  125,  125,
      125,  126,  126,  126,  126,  126,  126,  126,  128,  128,
      128,  128,  128,  128,  128,  129,    0,  129,  130,  130,
        0,  130,  130,  130,  130,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132,  132,  132,  132,  132,  133,
        0,    0,    0,    0,  133,  134,  134,  135,    0,    0,
      135,  135,  135,  135,  136,  136,  136,  136,  136,  136,
      136,  138,  138,  139,  139,  141,  141,  142,  142,  142,

      142,  142,  142,  142,  143,  143,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "swlex.l"
#define INITIAL 0
#line 2 "swlex.l"
/*
swlex.l
*/
/* 
//  swlex.l
//  Copyright (c) 1997-98 James Lowe, Jr. <jhl@richmond.infi.net>

//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2, or (at your option)
//  any later version.

//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.

//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/


/* 
  A lex(1) Scanner for POSIX.7.2 Software Package Metadata Files


File Format Syntax Description :
    The file consists mostly of KEYWORD/VALUE pairs.
    Whitespace separate the value from the keyword.
    Each Keyword (and Value) is on its own line.
    Quoted Values can be multi-Line.
    Comments are preceeded by a '#'.
    Comments can be on the same line as a unquoted value
    at the end of the line.
    A '#' can be escaped within a unquoted value.
    A '\"' can be escaped within a quoted value.
 
    Some Keywords are Object keywords and have nothing on
    the same line after them except whitespace and a newline.

    A '<' less-than symbol means the contents of the file
    given by the succeeding PATHNAME is the quoted value for 
    the preceeding keyword. 

*/

#include "swuser_config.h"
#include "string.h"
#include "strob.h"
#include "swlex_supp.h"
#include "swutilname.h"

/*
 * The struct swbis_keyword must be the same as the
 * struct in sw_keyword.h
 */

struct swbis_keyword {
   char * name;
   int flag;
};


#undef YY_INPUT
#define YY_INPUT(b,r,ms) (r=swlex_input(b,ms))

int yyerror(char*);

/**********************************************************************/
/*  -----------------  External Global Variables ------------------   */    
/*             ___Must be Provided by calling program____             */
extern int swlex_debug;            /* Debug switch                    */
extern int swlex_definition_file;  /* file name that is being scanned */
extern int swlex_inputfd;          /* type <UXFIO> file descriptor    */  
extern int swlex_errorcode;        /* error code, 0 is no error       */  
/* ------------------------------------------------------------------ */
/**********************************************************************/


/**********************************************************************/
/* ----------------- Internally Satisfied External Global ------------*/
extern struct swbis_keyword sw_keywords[];  /*       See sw_keyword.h */
                                      /* Put your keywords here ^^^   */
/* ------------------------------------------------------------------ */
/**********************************************************************/


/**********************************************************************/
/* ---------- Parser feed-back variable Global ---------------------- */
int swlex_yacc_feedback_directory=0;    /* set to 1 by the parser      */
int swlex_yacc_feedback_fileset=0;    /* set to 1 by the parser      */
                                       /* when parsing PSF filesets.  */

int swlex_yacc_feedback_file_object=0; /* set to 1 when in file or    */
                                       /* controlfile objects in PSF  */
				       /* filesets.                   */
int swlex_yacc_feedback_controlfile_object=0;  /*                     */
/* ------------------------------------------------------------------ */
/**********************************************************************/

static STROB * swlex_strb;
static unsigned char * user_cp;
static unsigned char  user_ch;
static int not_first_time = 0;
static int psfi_first_read = 1;
static int is_extended_keyword = 0;
static int first_keyword=1;
static int have_terminated=0;
static int not_very_first_time = 0;
static int in_object_definition=0;
static int swlex_l_i, keytype;
extern int swlex_linenumber;

int swlex_handle_keyword ( char *string, int keycode , int * keytype);
int swlex_input (char * buf, int max_size);
int do_test_ext(void);
size_t uxfio_sfread (int swlex_inputfd, void * buf, size_t max_size); 
void swlex_squash_trailing_white_space (char *);

/* Object keywords are 4 or more chars long, this is a hack to support the HP 'end' keyword */
#define QUOTEDSTRING 1

#define VALUE 2

#define ENDQUOTE 3

#define OPTVALUE 4

#define UNQUOTEDSTR 5

#define OPTUNQUOTEDSTR 6

#define OPTIONVALUEWS 7

#define VALUEWS 8

#define INPUT_REDIR 9

#define INITIAL_NEWLINE 10

#define INVALID_INPUT 11

#define FINAL_EOF 12

#line 688 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 159 "swlex.l"



  if (!not_first_time) { /* tell the parser what type of file it is */
        not_first_time=1; 
	if ( not_very_first_time ) { 
           yyrestart(NULL); 
	   yy_n_chars=0;
	   yy_start = 0;
	   yy_did_buffer_switch_on_eof=0;
	} 
        swlex_strb = strob_open (8); 
	return swlex_definition_file;
  }
  not_very_first_time = 1;


#line 860 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 119 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 607 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 176 "swlex.l"
{ 
		/* I think this will never be matched, effectively dead code */
		yyerror("invalid or binary input"); 
		exit(1); 
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 182 "swlex.l"
{
                          if ( handle_termination ('\"',  swlex_strb, yytext, "loc=A" )) {
			      BEGIN ENDQUOTE;
                              unput(*(strob_str(swlex_strb)+strlen(strob_str(swlex_strb))-1)); 
			      user_cp = (unsigned char *)(strob_str (swlex_strb) + strlen(strob_str (swlex_strb)) - 1); 
			      user_ch = *user_cp;
			      *user_cp = '\0';
			      strob_strcpy(yylval.strb, "\""); 
			      strob_strcat(yylval.strb, strob_str(swlex_strb)); 
			      strob_strcat(yylval.strb, "\""); 
			      if (swlex_debug) fprintf (stderr,"return SW_SHELL_TOKEN_STRING {%s}\n", yytext);
			      return SW_SHELL_TOKEN_STRING;
                          }
		      }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 197 "swlex.l"
{
                           if (handle_termination ('\"',  swlex_strb, yytext, "loc=B" )) {
                             BEGIN INITIAL_NEWLINE; 
			     if (swlex_debug) 
			         fprintf (stderr,"BEGIN INITIAL_NEWLINE {endquote}%s{end of endquote}\n", yytext);
		           }
                     }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 205 "swlex.l"
{
                          if ( handle_termination ('#',  swlex_strb, yytext, "loc=C" )) {
			      BEGIN INITIAL_NEWLINE;
                              unput(*(strob_str(swlex_strb)+strlen(strob_str(swlex_strb))-1));
			      user_cp  = (unsigned char *)(strob_str(swlex_strb) + strlen(strob_str (swlex_strb))-1);
			      user_ch = *user_cp;
			      *user_cp  = '\0';
                              swlex_squash_trailing_white_space(strob_str(swlex_strb));
			      strob_strcpy(yylval.strb, strob_str(swlex_strb)); 
			      if (swlex_debug) fprintf (stderr,"return SW_SHELL_TOKEN_STRING {%s}\n", yytext);
		              return SW_SHELL_TOKEN_STRING; 
			   }   
			 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 219 "swlex.l"
{
                           if ( handle_termination ('#',  swlex_strb, yytext, "loc=D" )) {
                              BEGIN INITIAL_NEWLINE;
			      if (swlex_debug) fprintf (stderr,"in <OPTUNQUOTEDSTR>{optuqstring}: handle_termination is TRUE\n");
                              unput(*(strob_str(swlex_strb)+strlen(strob_str(swlex_strb))-1));
			      user_cp = (unsigned char *)(strob_str(swlex_strb) + strlen(strob_str(swlex_strb))-1);
			      user_ch = *user_cp;
			      *user_cp = '\0';
                              swlex_squash_trailing_white_space(strob_str(swlex_strb));
			      strob_strcpy(yylval.strb, strob_str(swlex_strb));
			      if (swlex_debug) fprintf (stderr,"return SW_SHELL_TOKEN_STRING {%s}\n", yytext);
		              return SW_SHELL_TOKEN_STRING; 
                            } else {
			      if (swlex_debug) fprintf (stderr,"in <OPTUNQUOTEDSTR>{optuqstring}: handle_termination is FALSE\n");
			    }
                         }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 237 "swlex.l"
{
                           if ( handle_termination ('\n',  swlex_strb, yytext, "loc=E" )) {
                              BEGIN INITIAL_NEWLINE;
			      if (swlex_debug) fprintf (stderr,"in <UNQUOTEDSTR>{uqstring}: handle_termination is TRUE\n");
                              unput(*(strob_str(swlex_strb)+strlen(strob_str(swlex_strb))-1));
			      user_cp = (unsigned char *)(strob_str(swlex_strb) + strlen(strob_str(swlex_strb))-1);
			      user_ch = *user_cp;
			      *user_cp = '\0';
                              swlex_squash_trailing_white_space(strob_str(swlex_strb));
			      strob_strcpy(yylval.strb, strob_str(swlex_strb));
			      if (swlex_debug) fprintf (stderr,"return SW_SHELL_TOKEN_STRING {%s}\n", yytext);
		              return SW_SHELL_TOKEN_STRING; 
                            } else {
			      if (swlex_debug) fprintf (stderr,"in <UNQUOTEDSTR>{uqstring}: handle_termination is FALSE\n");
			    }
                         }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 254 "swlex.l"
{ BEGIN QUOTEDSTRING; 
                      if (swlex_debug)
		          fprintf (stderr,"BEGIN QUOTEDSTRING <VALUE>{beginquote}%s{end of beginquote}}\n", yytext);
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 259 "swlex.l"
{ BEGIN QUOTEDSTRING; 
                      if (swlex_debug)
		          fprintf (stderr,"BEGIN QUOTEDSTRING <VALUE>{beginquote}%s{end of beginquote}}\n", yytext);
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 264 "swlex.l"
{   
                        BEGIN OPTUNQUOTEDSTR;
			if (swlex_debug) fprintf (stderr, "<OPTVALUE>{unquotedvalue}%s{end}\n", yytext);
		        unput(yytext[strlen(yytext)-1]);
                        if (swlex_debug)
			    fprintf (stderr,"BEGIN OPTUNQUOTEDSTR {unquotedvalue Look Ahead }%s{end unquotedvalue Look Ahead}\n", yytext); 
                       }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 273 "swlex.l"
{   
                        BEGIN UNQUOTEDSTR;
			if (swlex_debug) fprintf (stderr, "<VALUE>{unquotedvalue}%s{end}\n", yytext);
		        unput(yytext[strlen(yytext)-1]);
                        if (swlex_debug)
			    fprintf (stderr,"BEGIN UNQUOTEDSTR {unquotedvalue Look Ahead }%s{end unquotedvalue Look Ahead}\n", yytext); 
                       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 281 "swlex.l"
{
			BEGIN INPUT_REDIR;
			
                        if (swlex_debug) fprintf (stderr,"BEGIN INPUT_REDIR {input_redir Look Ahead }%s{end input_redir Look Ahead}\n", yytext); 
		
                        strob_strcpy(yylval.strb, yytext);
	
                        if (swlex_debug) fprintf (stderr,"in VALUE{input_redir} %c\n", yytext[0]); 

                        return yytext[0];  
		      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 293 "swlex.l"
{
                    swlex_errorcode = 1;
                    return -1;  
                  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 299 "swlex.l"
{
		    if (swlex_debug) fprintf(stderr,"In INPUT_REDIR:  returning SW_WHITE_SPACE_STRING\n");
		    return SW_WHITE_SPACE_STRING;
                  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 305 "swlex.l"
{
		    BEGIN INITIAL; 
		    if (swlex_debug) fprintf(stderr,"return SW_NEWLINE_STRING\n");
		    return SW_NEWLINE_STRING;
                  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 311 "swlex.l"
{
                     BEGIN INITIAL_NEWLINE;
                     strob_strcpy(yylval.strb, yytext);
                     swlex_squash_trailing_white_space(strob_str(yylval.strb));
		     if (swlex_debug) fprintf (stderr,"return SW_PATHNAME_CHARACTER_STRING\n");
		     if ( swlex_yacc_feedback_file_object|| swlex_yacc_feedback_controlfile_object) { 
		    		/*
				* error.
				*/
				fprintf(stderr, "%s: swparser: attribute file inclusion not allowed in file and control_file objects.\n", swlib_utilname_get());
			 	return SW_OK_NEWLINE_STRING;  /* This causes a syntax error. */
		     }
		     return SW_PATHNAME_CHARACTER_STRING;
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 326 "swlex.l"
{   
		    BEGIN OPTVALUE;  
		    first_keyword=0; 
		    if (swlex_debug) fprintf(stderr, "<OPTIONVALUEWS>{ws}%s{end}\n", yytext);
		    if (is_extended_keyword==1) {
		       is_extended_keyword=0;
		       if (swlex_debug) fprintf(stderr,"return SW_EXT_WHITE_SPACE_STRING\n");
		       return SW_EXT_WHITE_SPACE_STRING;
                    }
		    if (swlex_debug) fprintf(stderr,"return SW_WHITE_SPACE_STRING\n");
		    return SW_WHITE_SPACE_STRING;
		   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 339 "swlex.l"
{   
		    BEGIN VALUE;  
		    first_keyword=0; 
		    if (swlex_debug) fprintf(stderr, "<VALUE>{ws}%s{end}\n", yytext);
		    if (is_extended_keyword==1) {
		       is_extended_keyword=0;
		       if (swlex_debug) fprintf(stderr,"return SW_EXT_WHITE_SPACE_STRING\n");
		       return SW_EXT_WHITE_SPACE_STRING;
                    }
		    if (swlex_debug) fprintf(stderr,"return SW_WHITE_SPACE_STRING\n");
		    return SW_WHITE_SPACE_STRING;
		   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 353 "swlex.l"
{  
			 
			 BEGIN INITIAL; 
		         first_keyword=0; 
			 if (swlex_debug) 
			    fprintf (stderr,"<VALUEWS> {objectkeywordws}%s{end of object keywordws}\n",yytext);
		         if (swlex_debug) fprintf (stderr,"return SW_OK_NEWLINE_STRING\n");
			 return SW_OK_NEWLINE_STRING;
			 }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 365 "swlex.l"
{ if (swlex_debug) fprintf(stderr,"<INITIAL>{lws}\n");}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 366 "swlex.l"
{ if (swlex_debug) fprintf(stderr,"<INITIAL>{ws}\n"); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 367 "swlex.l"
{ 
                         if (swlex_debug) printf("<INITIAL>{comment}%s{end of comment}\n", yytext);
			 
		    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 372 "swlex.l"
{

                     BEGIN VALUEWS; 
		     if (swlex_debug) fprintf(stderr, "<INITIAL>{objectkeyword}%s{end}\n", yytext);
                     strob_strcpy(swlex_strb, "");
	             strob_strcpy(yylval.strb, yytext);
		     swlex_squash_trailing_white_space(strob_str(yylval.strb) );
		     swlex_l_i =  swlex_handle_keyword(strob_str(yylval.strb), -1, &keytype );
                     keytype = SWLEX_KEYTYPE_OBJECT;
		     if (swlex_l_i <0) return 0; 
		     
		     if ( (!first_keyword) && ( !have_terminated ) ) { 
		               /* return termination newline token */ 
		               have_terminated = 1;           
			       BEGIN INITIAL; /* issue the terminating newline and redo this state */
		               yyless(0); 
		               in_object_definition=0;
		               if (swlex_debug) fprintf (stderr,"return SW_TERM_NEWLINE_STRING\n");
			       return SW_TERM_NEWLINE_STRING;  /* this token terminates software_definitions */
		     } else {
			       first_keyword=0;
		               have_terminated = 0;
		               unput ('\n'); 
		               in_object_definition=1;
		               if (swlex_debug) fprintf (stderr,"return swlex_l_i %d\n", swlex_l_i);
			       return swlex_l_i;  /* return the keyword token */
		     }
                   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 400 "swlex.l"
{
   		     if (swlex_definition_file != SW_OPTION) {
                     	BEGIN VALUEWS; 
                     } else {
                     	BEGIN OPTIONVALUEWS; 
		     }
		     if (swlex_debug) fprintf (stderr, "<INITIAL>{keyword}%s{end}\n", yytext);
                     strob_strcpy(swlex_strb, "");
	             strob_strcpy(yylval.strb, yytext);
		     
		     swlex_l_i = swlex_handle_keyword(strob_str(yylval.strb), -1, &keytype );
		     
		     /* allow unrecognized keywords */
		     if (swlex_l_i < 0) { 
		        swlex_l_i = SW_ATTRIBUTE_KEYWORD; 
                     }

		     /* if in `fileset' , then extended keyword terminates object keyword */ 
		     
		      
		     if ( keytype == SWLEX_KEYTYPE_EXT && 
		              (swlex_yacc_feedback_fileset||
			      swlex_yacc_feedback_file_object||
			      swlex_yacc_feedback_controlfile_object)) { 
		              return do_test_ext();   
		     }
		     if ( keytype == SWLEX_KEYTYPE_EXT && !(swlex_yacc_feedback_fileset||
		                                                 swlex_yacc_feedback_file_object|| 
		                                                 swlex_yacc_feedback_controlfile_object) ) { 
			  fprintf (stderr,"error in fileset state feedback %s\n", yytext ); 
		     }

		     /* 'directory' or 'path' keyword type ambiguity */
		     if (keytype == SWLEX_KEYTYPE_AMBIG_AE ) { 
			 
			 if ( swlex_yacc_feedback_fileset == 1 && 
			      swlex_yacc_feedback_directory == 0 &&
			      strcmp(strob_str(yylval.strb), "directory") == 0
			 ) {
				 return do_test_ext();   
			 } else if ( (swlex_yacc_feedback_fileset == 0 || swlex_yacc_feedback_controlfile_object) ||
					swlex_yacc_feedback_directory 
			 ) {
		                    is_extended_keyword=0;
		                    if (swlex_debug) fprintf (stderr,"return SW_ATTRIBUTE_KEYWORD\n");
			            return SW_ATTRIBUTE_KEYWORD;
			 } else if ( (swlex_yacc_feedback_fileset == 0 || swlex_yacc_feedback_file_object) ||
					swlex_yacc_feedback_directory 
			 ) {
		                    is_extended_keyword=0;
		                    if (swlex_debug) fprintf (stderr,"return SW_ATTRIBUTE_KEYWORD\n");
			            return SW_ATTRIBUTE_KEYWORD;
		         } else {
				 return do_test_ext();   
			 }
		     } 
		     
		     if (keytype == SWLEX_KEYTYPE_AMBIG_OE || keytype == SWLEX_KEYTYPE_AMBIG_OA) { /* handle file and control_file type ambiguity*/
		          is_extended_keyword=1;
			  if ((!first_keyword) && (!have_terminated)) {
	                       if(!strcmp(strob_str(yylval.strb), "category")) {
		          		is_extended_keyword=0;
		               		if (swlex_debug) fprintf(stderr,"return SW_ATTRIBUTE_KEYWORD\n");
			       		return SW_ATTRIBUTE_KEYWORD;
			       } else {
			       		/* return termination newline token */ 
		  	       		have_terminated = 1;           
			       		BEGIN INITIAL; /* issue the terminating newline and redo this state */
		               		yyless(0); 
		               		in_object_definition=0;
		               		if (swlex_debug) fprintf(stderr,"return SW_TERM_NEWLINE_STRING\n");
			       		return SW_TERM_NEWLINE_STRING;  /* this token terminates software_definitions */
			       }
		          } else {
		               if (swlex_debug) fprintf (stderr,"return SW_EXT_KEYWORD\n");
			       return SW_EXT_KEYWORD;
		          }
		     }
		     return swlex_l_i; 
		    
		    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 482 "swlex.l"
{ if (swlex_debug) fprintf (stderr,"<INITIAL>{nl}\n"); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 483 "swlex.l"
{ BEGIN FINAL_EOF; 
                             if (swlex_debug) fprintf (stderr,"<INITIAL>{EOF}\n"); unput('_'); 
                             
			     if (in_object_definition) {
		                if (swlex_debug) fprintf(stderr,"return SW_TERM_NEWLINE_STRING\n");
                                return SW_TERM_NEWLINE_STRING;  
		   	     }
		   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 492 "swlex.l"
{ 
                   if (swlex_debug) fprintf (stderr, "<FINAL>{EOF}\n");  
		   yy_delete_buffer(YY_CURRENT_BUFFER);

/* this flex specific code is needed to
   reset the parser so it can be used more than once.
*/
yy_hold_char = 0;
yy_n_chars = 0;  
yy_c_buf_p = (char *) 0;
yy_init = 1;  
yy_start = 0; 
yy_did_buffer_switch_on_eof = 0;


		   swlex_yacc_feedback_fileset=0;  
                   swlex_yacc_feedback_file_object=0;
                   swlex_yacc_feedback_controlfile_object=0; 

                   not_first_time = 0;
                   is_extended_keyword = 0;
                   first_keyword=1;
                   have_terminated=0;
                   in_object_definition=0;
                   swlex_l_i=0;
                   keytype=0;
		   psfi_first_read = 1;
                   not_very_first_time = 1;
                   strob_close (swlex_strb);
		   
		   BEGIN INITIAL;
		   if (swlex_debug) fprintf (stderr,"BEGIN INITIAL\n");
		   return 0; /* SW_LEXER_EOF */ 
	        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 527 "swlex.l"
ECHO;
	YY_BREAK
#line 1374 "lex.yy.c"
case YY_STATE_EOF(QUOTEDSTRING):
case YY_STATE_EOF(VALUE):
case YY_STATE_EOF(ENDQUOTE):
case YY_STATE_EOF(OPTVALUE):
case YY_STATE_EOF(UNQUOTEDSTR):
case YY_STATE_EOF(OPTUNQUOTEDSTR):
case YY_STATE_EOF(OPTIONVALUEWS):
case YY_STATE_EOF(VALUEWS):
case YY_STATE_EOF(INPUT_REDIR):
case YY_STATE_EOF(INITIAL_NEWLINE):
case YY_STATE_EOF(INVALID_INPUT):
case YY_STATE_EOF(FINAL_EOF):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 119 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 119 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 118);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 527 "swlex.l"


int yyerror (char * s)  { fprintf (stderr,"%s: swparser: %s\n", swlib_utilname_get(), s);
                          fprintf (stderr,"%s: swparser: at or near line %d: %s\n", swlib_utilname_get(), swlex_linenumber, strob_str(yylval.strb));
                          swlex_errorcode = 1;
			  return SW_LEXER_FATAL_ERROR;
			}

int swlex_input (char * buf, int max_size) {
   /* FIXME */
   /* For the SW_PSF_INCL filetype, feed an initial empty object
    *  to boot the lexer into a state where it works.  This is 
    *  a terrible work around due to a bug in an insanely
    *  complicated lexer.
    */
   int r;
   unsigned char * c;
   if (psfi_first_read && swlex_definition_file == SW_PSF_INCL) {
	psfi_first_read = 0;
	strcpy(buf, "file\n");
   	return strlen("file\n");
   }
   r = uxfio_sfread(swlex_inputfd, buf, max_size);
   if (r > 0) {
     c = (unsigned char *)buf;
     while (c && ((char*)c - buf) < r) {
	/* Perform a rough range check for valid UTF-8 chars */
	if (*c >= 245 || *c == 192 || *c == 193 || *c == 0 ) {
		swlex_errorcode = 1;
		fprintf(stderr, "%s: non UTF-8 input detected, Octet=%dd\n", swlib_utilname_get(), (int)(*c)); 
		return -1;
	}
	/* Strip carriage returns cr */
        if (*c == '\r' && ((char*)(c+1) - buf) < r && *((char*)(c+1)) == '\n') {
		/* stripcr */
		memmove(c, c+1, (size_t)r - (size_t)((char*)(c+1) - buf));
		r--;
	}
        if (*c == '\n') swlex_linenumber++;
        c++;
     }
   }
   return r;
}

int
do_test_ext() {			 
         is_extended_keyword=1;
	 if ( (!first_keyword) && ( !have_terminated ) ) { 
       /* return termination newline token */ 
         have_terminated = 1;           
          BEGIN INITIAL; 
          yyless(0); 
          in_object_definition=0;
          if (swlex_debug) fprintf (stderr,"return SW_TERM_NEWLINE_STRING\n");
       	       return SW_TERM_NEWLINE_STRING;  /* this token terminates software_definitions */
          } else {
               if (swlex_debug) fprintf (stderr,"return SW_EXT_KEYWORD\n");
               return SW_EXT_KEYWORD;
	  }
}
