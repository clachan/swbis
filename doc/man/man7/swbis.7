...\" $Header: /usr/src/docbook-to-man/cmd/RCS/docbook-to-man.sh,v 1.3 1996/06/17 03:36:49 fld Exp $
...\"
...\"	transcript compatibility for postscript use.
...\"
...\"	synopsis:  .P! <file.ps>
...\"
.de P!
\\&.
.fl			\" force out current output buffer
\\!%PB
\\!/showpage{}def
...\" the following is from Ken Flowers -- it prevents dictionary overflows
\\!/tempdict 200 dict def tempdict begin
.fl			\" prolog
.sy cat \\$1\" bring in postscript file
...\" the following line matches the tempdict above
\\!end % tempdict %
\\!PE
\\!.
.sp \\$2u	\" move below the image
..
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "SWBIS" "7"
 
.hy 0 
.if n .na
.SH "NAME"
swbis \(em Distributed Software Administration
 
.SH "SYNOPSIS"
.PP
.nf
swbis \fI\<sw_utility\>\fP [options] [software_selections] [@targets]
\fI\<sw_utility\>\fP [options] [software_selections] [@targets]
.fi
.SH "DESCRIPTION"
.PP
\fBswbis\fP is a network transparent software administration system for
GNU/Linux systems and systems that are UNIX system-like\&. It implements the
Open Group\&'s CAE Spec C701 (XDSA) Distributed Software Administration\&.
This spec closely follows ISO/IEC 15068-2:1999 (now withdrawn)
which was identical to IEEE 1387\&.2:1995\&.
The implementation relies on POSIX functionality as provided by a typical GNU system\&.
It has security enhancement extensions that use GNU Privacy Guard\&.
Although swpackage is a self-contained tar writing utility and swinstall will use
generic tar for file loading, several features are based on bit-for-bit sameness with the GNU tar POSIX
tar interchange format, hence, GNU tar is a special tool requirement for swbis (although for most uses of the
system tar utility, only generic options are specified)\&.
.SH "OPTIONS"
.PP
The  \fBselection@target\fP syntax supports multiple selections and targets\&.
The same selection spec applies to all the targets\&.  A single \&'Commercial at\&' \&'@\&'
separates the two lists\&.  Software selections apply within a single distribution
tarball or within a single directory representing
installed  software\&.
Software selections don\&'t specify a source file\&.
The source file is specified by a separate option for utilites that use
the  target as a destination, and by the target if the source is the
destination\&.
.SS "Software Selections"
.PP
Software Selections specify, by a software_spec, objects which to operate\&.
A software_spec consists of a period \&'\&.\&' delimited list of tags
followed by a comma and a comma delimited list of version identifiers
for revision, qualifier, vendor_tag, architecture, location, denoted by
the letters \fBr,q,v,a,l\fP\&.
.PP
The important tags of familiar repute are 
\fIproduct\fP\&.\fBtag\fP and
\fIproduct\fP\&.\fBrevision\fP along with an optional
\fIproduct\fP\&.\fBvendor_tag\fP\&.
These correspond to RPMTAG_NAME, RPMTAG_VERSION, and RPMTAG_RELEASE attributes\&.
These are specified in a software_selection by example thusly:
.PP
.nf
\f(CW   # Note: Quotes are needed to prevent command-line interpretation
   "*"                        # all packages
   r==3\&.1                     # Any package with revision 3\&.1
   somepackage                # all packages named \&'somepackage\&'
   somepackage,r">"2          # and revision greater than 2
   somepackage,r">"2,r"<"3    # and revision greater than 2 and less than 3
   somepackage,r">"2,v=hal    # and by vendor \&'hal\&'\fR
.fi
.PP
 Logical alternation or \&'OR\&' is supported by using a second software_spec on the 
command line\&. software_specs are separated by whitespace\&.
.SS "Targets"
.PP
Targets are hosts or files on a host\&.  The syntax follows the familiar
\fBhost:file\fP convention but differs in that an unadorned name is a host
not a file\&.
To impose interpretation as a file prefix with a colon \&':\&' or
use an absolute path (i\&.e\&. prefix with \&'/\&')\&.
.PP
.PP
.nf
\f(CWSource and Target Specification and Logic
     
     Synopsis:
          Posix:
               host[:path]
               host
               host:
               /path  # Absolute path

          Swbis Extension:
               [user@]host[:path]
               [user@]host_port[:path]
               :path

          Swbis Multi-hop Target Extension:
               # \&':\&' is the target delimiter
	       # \&'_\&' delimits a port number in the host field

               [user@]host[@@[user@]host[@@\&.\&.\&.]][:file] 
               [user@]host_port[@@[user@]host[@@\&.\&.\&.]][:file] 
              
               # Using \&':\&', a trailing colon is used to
               # disambiguate between a host and file\&.
	       # For Example,
               :file
               host:
               host
               host:file
               host:host:
               host_port:host_port:
               host:host:file
               user@host:user@host:
               user@host:user@host:host:
               user@host:user@host:file
 
     A more formal description:

     target : HOST_CHARACTER_STRING \&':\&' PATHNAME_CHARACTER_STRING
            | HOST_CHARACTER_STRING \&':\&'
            | HOST_CHARACTER_STRING 
            | PATHNAME_CHARACTER_STRING 
            | \&':\&' PATHNAME_CHARACTER_STRING   # Impl extension
            ; 

       PATHNAME_CHARACTER_STRING must be an absolute path unless
                       a HOST_CHARACTER_STRING is given\&.  Allowing
                       a relative path is a feature of the swbis
                       implementation\&.

                NOTE: A \&'\&.\&' as a target is an implementation
                      extension and means extract in current
                      directory\&.
 
                NOTE: A \&'-\&' indicating stdout/stdin is an 
                      implementation extension\&.

                NOTE: A \&':\&' in the first character indicates a filename\&.
                      This is an implementation extension\&.

       HOST_CHARACTER_STRING is an IP or hostname\&.

    Examples:
       Copy the  distribution /var/tmp/foo\&.tar\&.gz at 192\&.168\&.1\&.10
              swcopy -s /var/tmp/foo\&.tar\&.gz @192\&.168\&.1\&.10:/root


Implementation Extension Syntax (multi ssh-hop) :
    Syntax:
    %start   wtarget    # the Implementation Extension Target
                        # Note: a trailing \&':\&' forces interpretation
                        # as a host, not a file\&.
    wtarget   : wtarget DELIM sshtarget
              | sshtarget
              | sshtarget DELIM
              ; 
    sshtarget : user \&'@\&' target # Note: only the last target
              | target          # may have a PATHNAME, and only a host
              ;                 * may have a user
    target   : HOST_CHARACTER_STRING
             | PATHNAME_CHARACTER_STRING
             ;
    user     : PORTABLE_CHARACTER_STRING  # The user name

    DELIM    : \&':\&'   # The multi-hop delimiter\&.
             ;  \fR
.fi
.PP
 
.SH "EXAMPLES"
.PP
Unpack a tarball on host1 and host2:
.PP
.nf
\f(CW   swcopy -s :somepackage-1\&.0\&.tar\&.gz --extract @ host1 host2\fR
.fi
.PP
.PP
List installed entries matching the software selections:
.PP
.nf
\f(CW   swlist somepackage,"r>2" @ host1:/ host2:/
   swlist "kde*" @ 192\&.168\&.2\&.2\fR
.fi
.PP
.PP
List the architectures of the specified hosts:
.PP
.nf
\f(CW   swlist -x verbose=3 -a architecture @ localhost 192\&.168\&.2\&.2 host1 host2\fR
.fi
.PP
.PP
Install a package from stdin to a location, l=/unionfs/foo-1\&.0,
and a "exp" qualification:
.PP
.nf
\f(CW    swinstall q=exp,l=/unionfs/foo-1\&.0 @ 192\&.168\&.2\&.2\fR
.fi
.PP
 
.PP
Remove a package named somepackage
.PP
.nf
\f(CW    swremove somepackage @ 192\&.168\&.2\&.2:/\fR
.fi
.PP
 
.PP
Make a tarball according to the recipe file \fBmyPSF\fP:
.PP
.nf
\f(CW    swpackage -s myPSF @- | tar tvf -\fR
.fi
.PP
.SH "COMMANDS OVERVIEW"
.SS "POSIX Commands"
.PP
Utilities specified by C701 and ISO/IEC 15068-2:1999 include the following:
.IP "   \(bu" 6
\fBswpackage\fP(8)
.IP "" 10
Create a tarball according to a recipe file\&.
.IP "   \(bu" 6
\fBswcopy\fP(8)
.IP "" 10
Copy a distribution from host to host\&.
.IP "   \(bu" 6
\fBswverify\fP(8)
.IP "" 10
Verify a software distribution signature\&.
.IP "   \(bu" 6
\fBswinstall\fP(8)
.IP "" 10
Install a software distribution\&.
.IP "   \(bu" 6
\fBswlist\fP(8)
.IP "" 10
List software information\&.
.IP "   \(bu" 6
\fBswremove\fP(8)
.IP "" 10
Remove packages
.SS "Swbis Specific Commands"
.PP
Utilities unique to swbis\&.
.IP "   \(bu" 6
\fBswign\fP(1)
.IP "" 10
Create the signed meta-data directory, \fBcatalog\fP/, of the contents of the current directory and
optionally write the entire directory, including the signed catalog as a tar archive\&.
.IP "   \(bu" 6
\<\fIlibexecdir\fP\>\fB/swbis/swbistar\fP
.IP "" 10
Archive writing (creation) utility, useful for testing\&.
.IP "   \(bu" 6
\<\fIlibexecdir\fP\>\fB/swbis/swbisparse\fP
.IP "" 10
Stand-alone parser of POSIX Metadata files, useful for testing\&.
.IP "   \(bu" 6
\<\fIlibexecdir\fP\>\fB/swbis/arf2arf\fP
.IP "" 10
Archive decoder/checker, Used by swverify\&.
.IP "   \(bu" 6
\<\fIlibexecdir\fP\>\fB/swbis/lxpsf\fP
.IP "" 10
Archive translator, used by \fBswpackage\fP to translate RPM packages\&.
.SH "RUNTIME CONFIGURATION"
.SS "Configuration Files"
.PP
All of the utilities share the same configuration files:
\fBswdefaults\fP and
\fBswbisdefaults\fP\&.
The files are sourced on the local management host and ignored (if present) on the
remote target host\&. Below are commands that give information about them\&.
All the utilities support these options and the defaults are separate for each
utility, swcopy is shown as an example\&.
.PP
.nf
\f(CW swcopy --show-options-files  # Show locations of existing files to stdout
 swcopy --show-options     # Show options with a shell assignment syntax
 swcopy --no-defaults --show-options  # Show builtin defaults\fR
.fi
.PP
.PP
The syntax is:
.PP
.nf
\f(CW # Comment
 # Here optionName applies to all utilities
 # the whitespace around the \&'=\&' is optional
 optionName = value # Comment

 # In addition a option can be applied to a specific utility
 # overriding the general one and the built-in default
 swutilityName\&.optionName = value\fR
.fi
.PP
.SS "Strategy for Compatibility with Existing Hosts"
.PP
The most important utiltities on which swbis relies is a POSIX shell, the system \fB/bin/sh\fP, and
the system tar utility, usually \fB/bin/tar\fP\&.  The POSIX shell need not be \fB/bin/sh\fP\&.
.PP
The POSIX shell must have specific compliance to
POSIX described the POSIX sh(1) manual page (IEEE Std 1003\&.1, 2004 Edition, Section STDIN) regarding
its use of stdin when it invokes a command that also uses stdin\&.  GNU Bash, public-domain ksh (pdksh),
OpenSolaris \fB/usr/xpg4/bin/sh\fP,  ATT ksh (latest version such as 93t+ 2010-03-05) have this feature\&.
Other shells including ash, dash, and \fB/bin/sh\fP on BSD, UNIX(tm), BusyBox systems do not\&.
.PP
Therefore, the most reliable and least intrusive strategy is use the auto-detection option\&.
If a host does not contain bash or a suitable ksh or sh the distributed utility will fail\&.
.PP
.nf
\f(CWswbis_no_getconf               = true # true or false, false=use getconf
swbis_shell_command            = detect # {detect|sh|bash|posix|ksh}\fR
.fi
.PP
 Alternatively, simply make \fB/bin/bash\fP a requirement on all hosts and set
.PP
.nf
\f(CWswbis_no_getconf               = true # true or false, false=use getconf
swbis_shell_command            = bash # {detect|sh|bash|posix|ksh}\fR
.fi
.PP
.PP
NOTE: The shell requirement does not apply to the user\&'s account shell (specified in /etc/passwd), although there
are reasons this shell should be a Bourne compatible shell\&.  See Acount Login Shell below
.PP
Regarding tar, it is used for file loading (installation) and also during verfication of installed software (as a means
to copy and inspect the installed files state)\&.  For installation, any tar will work as no non-traditional options are specified\&.
.PP
The configuration options, in \fBswbisdefaults\fP allow some flexibilty here
.PP
.nf
\f(CWswbis_local_pax_write_command  = tar  # {pax|tar|star|gtar}
swbis_remote_pax_write_command = tar  # {pax|tar|star|gtar}
swbis_local_pax_read_command   = tar  # {pax|tar|star|gtar}
swbis_remote_pax_read_command  = tar  # {pax|tar|star|gtar}\fR
.fi
.PP
.PP
.nf
\f(CWswverify\&.swbis_local_pax_write_command   = detect # {pax|tar|star|gtar}
swverify\&.swbis_remote_pax_write_command  = detect # {pax|tar|star|gtar}
swlist\&.swbis_local_pax_write_command   =   detect  # {pax|tar|star|gtar}
swlist\&.swbis_remote_pax_write_command  =   detect  # {pax|tar|star|gtar}\fR
.fi
.PP
 
This allows keeping and using the system \&'/bin/tar\&', and only using GNU tar or pax
for verification and listing\&.
.PP
Other important options are:
.PP
.nf
\f(CWswcopy\&.swbis_allow_rpm       = true  # Enable automatic translation
swinstall\&.swbis_allow_rpm    = true  # Enable automatic translation
swcopy\&.swbis_no_audit        = true  # Copy as arbitrary data, true or false
swbis_remote_shell_client    = ssh   # {ssh|rsh}
swbis_forward_agent          = true  # Set ssh -A for multi-hop (>1) jumps
.PP
.nf
\f(CW\fR
.fi
.PP
\fR
.fi
.PP
 Here is a incomplete explanation of each option
.IP "   \(bu" 6
Extended Option: \fBswbis_local_pax_read_command\fP
.br
Extended Option: \fBswbis_remote_pax_read_command\fP
.br
.IP "" 10
If installing
on a system, any \fBtar\fP will work\&.  GNU \fBtar\fP is required when using \fBswign\fP to create a signed archive or directory\&.
If \fBpax\fP is selected as the archive read command (for installing), errors will
be returned if the installation is not by a root user (or if not root, if the package contained files
with different ownerships than the current user)\&.
.PP
.nf
\f(CWswbis_local_pax_read_command = tar #{pax|tar|gtar}
swbis_remote_pax_read_command= tar #{pax|tar|gtar}\fR
.fi
.PP
.IP "   \(bu" 6
Extended Option: \fBswbis_local_pax_write_command\fP
.br
Extended Option: \fBswbis_remote_pax_write_command\fP
.br
.IP "" 10
\fBswcopy\fP and \fBswinstall\fP may use the system tar (which may not be
GNU tar or pax)\&.  
\fBswpackage\fP is self-contained and does not use any file system tar-like utility\&.
\fBswign\fP does not read the options files and assumes and requires that \fBtar\fP is GNU tar\&.
\fBswlist\fP and \fBswverify\fP requires either GNU tar or pax and can be set to
detect a suitable tar or pax\&.
.PP
.nf
\f(CWswlist\&.swbis_local_pax_write_command=detect #{pax|tar|gtar|detect}
swlist\&.swbis_remote_pax_write_command=detect #{pax|tar|gtar|detect}
swverify\&.swbis_local_pax_write_command=detect #{pax|tar|gtar|detect}
swverify\&.swbis_remote_pax_write_command=detect #{pax|tar|gtar|detect}
swbis_local_pax_write_command = tar #{pax|tar|gtar}
swbis_remote_pax_write_command= tar #{pax|tar|gtar}\fR
.fi
.PP
 
.IP "   \(bu" 6
Extended Option: \fBswbis_shell_command\fP
.IP "" 10
This may be one of
\fBdetect\fP,
\fBbash\fP,
\fBksh\fP,
\fBsh\fP, or
\fBposix\fP\&.  \fBdetect\fP is the best choice\&.
ksh must be public domain ksh or ATT ksh93 (version 2009-05-05 or newer)\&. Older versions of
ksh93 do not have the required POSIX feature\&.
.IP "   \(bu" 6
\fBAccount Login Shell\fP
.IP "" 10
The login shell may be any shell, however, if a host will ever be a intermediate
host in a multi-hop target, then it should be a Bourne compatible or POSIX conforming shell\&.
This requirement is due to the escapement and processing of shell special characters which are
performed by the login shell of the intermediate host account\&.
.IP "   \(bu" 6
Extended Option: \fBswbis_forward_agent\fP
.IP "" 10
The default value is True\&.  This sets the \fB-A\fP in the \fBssh\fP client for multi-hop targets\&.  There are security considerations when forwarding the 
authentication agent\&.
.SH "HOST REQUIREMENTS"
.PP
The swbis distributed utilties have no special requirements and will operate
on any full-size OpenSolaris, BSD or GNU/Linux host\&.  You may immediately and remotely
distribute and manage packages on these hosts with nothing more than a login account
and a ssh connection\&.  Below are the technical details\&.  The configuration file options
to allow this are the built-in defaults,  certain values in historic versions of the defaults file,
\fBswbisdefaults\fP, may break this functionality\&.
.PP
The swbis distributed utilities require
\fBbash\fP, public domain \fBksh\fP, or 
Sun\&'s /usr/xpg4/bin/sh to be present on the target host\&.  If the
\fBswbis_shell_command\fP extended option is set to \&'detect\&'
you don\&'t have to know which one is present, otherwise you may specify one explicitly\&.
.PP
.nf
\f(CWswbis_shell_command=detect #{posix|sh|bash|ksh|detect}\fR
.fi
.PP
.PP
Tar or pax is used for file loading (installation) and internally for data transfer\&.  You may specify which one\&.  
\fBswlist\fP and \fBswverify\fP require
either GNU tar or pax be present on a host\&.  You may set auto detection
for this requirement\&.  As of release 1\&.12 (c\&.August 2014), all invocations of the system tar utility
for archive creation use the \&'--format=pax\&' option of GNU tar\&.  A test is made for GNU tar and generic
options are used if no suitable version of GNU tar is present allowing generic tar to work\&.

.PP
.nf
\f(CWswlist\&.swbis_local_pax_write_command=detect #{pax|tar|gtar|detect}
swlist\&.swbis_remote_pax_write_command=detect #{pax|tar|gtar|detect}
swverify\&.swbis_local_pax_write_command=detect #{pax|tar|gtar|detect}
swverify\&.swbis_remote_pax_write_command=detect #{pax|tar|gtar|detect}
swinstall\&.swbis_local_pax_write_command = tar #{pax|tar|gtar}
swinstall\&.swbis_remote_pax_write_command= tar #{pax|tar|gtar}
swinstall\&.swbis_local_pax_read_command  = tar #{pax|tar|gtar}
swinstall\&.swbis_remote_pax_read_command = tar #{pax|tar|gtar}\fR
.fi
.PP
.PP
A POSIX \fBawk\fP is required, and with the ability to
specify several thousand bytes of program text as a command argument\&.
GNU awk  works, as does the ATT Awk book awk, and the awk on BSD systems\&.
See the INSTALL file for further details regarding a small issue with the
OpenSolaris (c\&.2006) awk\&.
.PP
GNU Privacy Guard, gpg is required for verification and  signing\&.
Use of the passphrase agent \fBgpg-agent\fP is supported so
as to avoid telling swpackage your passphrase\&.  When swverify uses gpg, 
a FIFO  is  constructed and deleted\&.  /dev/null and /dev/zero are required\&.
Verification takes place on the management host\&. It would not be used on the
(remote) target host\&.
.PP
For verifying package tarballs, only \fBswverify\fP and \fBgpg\fP is required\&.
For verifying the unpacked tarball (i\&.e\&. as a signed directory) GNU  tar,
awk,  sha1sum,  md5sum  (or  openssl)  and  various other utilities are
required\&.
.PP
When a host is participating in remote connections via ssh/rsh, either as
the terminal target host or intermediate host, the login shell for the user
must be a Bourne compatible shell, for example \fB/bin/sh\fP\&.
Most traditional Bourne shell\&'s are acceptable as /bin/sh, one notable exception
is \fB/bin/ash\fP when operating on the terminal host (due to its read block size)\&.
However, \fB/bin/dash\fP, BSD \fB/bin/sh\fP, and Sun\&'s /bin/sh
are all acceptable\&.  Note that /bin/sh need not be the system POSIX shell\&.
.PP
As stated above, a POSIX shell is required and the only suitable implementations (as of Sep 2010) are
\fB/bin/bash\fP, \fB/bin/ksh\fP (Public Domain or ksh93 v\&.2009-05-05 or newer),
Sun\&'s \fB/usr/xpg4/bin/sh\fP, and MirBSD Korn Shell (\fB/bin/mksh\fP) all assumed
to be in these locations\&.
.SH "DISCUSSION"
.SS "Background"
.PP
The spec describes a format for storing package meta-data in a software
distribution and a set of utilities\&.  The meta-data is stored
in-band for format level compatibility\&.  The meta-data is separated by placement
in a specially named directory, \fBcatalog/\fP\&.
The spec goes further and describes how multiple products, for example
a distribution archive containing products for multiple architectures,
can be placed in a separate control directories within the distribution archive\&.
This is supported along with an extension to allow these directories to be
nil collapsing the layout into the familiar form of a free software
tarball or run-time distribution directly installable by \fBtar\fP\&.
When the collapsed form is used, the in-band \fBcatalog/\fP directory
is next to (in the same directory as) the payload files hence "catalog" becomes
a reserved word for package files\&.
.PP
While the swbis system has features comparable with package managers, it has
features that are of general purpose usefulness to system administrators and
developers\&.  These include host-to-host copying of file system directories,
advanced tarball creation methods,
backward compatibility with uses of plain tarballs, and the capability  
to act as a directory content integrity checker, and the ability to
translate and install RPM format packages\&.
.SS "Distributed Software Administration"
.PP
The XDSA spec describes a syntax for distributed operations, but does not
specify any implementation approach to the problem of remote command invocation\&.
The approach taken by swbis is to require nothing that is not already present
on all POSIX systems\&. To that end, swbis uses rsh (or ssh) for remote connections and
uses bash (A POSIX shell) for command processing specifically using
the \&'bash -s\&' invocation for all operations\&.  Using bash in this manner casts
all swbis utilties as programs that dynamically write and deliver shell program code
to the remote \&'bash -s\&' through its standard input, which can be a secure ssh channel\&.
This eliminates the requirement that swbis be installed on the remote target host\&.
.SS "A Directory Content Checker"
.PP
The \fBswign\fP program creates the
\fBcatalog/\fP directory which is, in effect, a GPG signed
manifest of the directory\&.  GNU tar is then used to recreate the signed and
digest  byte  streams  from the directory contents which are never removed nor
altered (except for the creation of catalog/)\&. It is able to do so
because swpackage, which generated the original byte  streams,  matches
GNU tar\&'s output bit-for-bit\&. For example:
.PP
.nf
\f(CW   swign  -D /usr/local/bin/checkdigest\&.sh  -o "" -g ""  -u  "Test User" @\&.
   swverify --order-catalog -d @\&.
          # If your file system is Ext2, then --order-catalog
          # is not required\&.\fR
.fi
.PP
.PP
The  \fBcheckdigest\&.sh\fP is a distributor specific shell
script that is run by swverify if it is present and part of the signed  stream\&.
\fBcheckdigest\&.sh\fP then checks the archive MD5 and SHA1\&.
If this fails, it checks the individual files\&'  MD5 and SHA1 digests\&.
[In current  versions of checkdigest,  the ownerships and permissions
are not checked individually, as swign was originally
intended as a source directory/archive signer tool\&.]
.PP
Use as a SCM (e\&.g\&. CVS, svn\&. etc) security tool easily follows by
making \fBcatalog/\fP a tracked directory in the SCM\&.
The catalog directory is updated using the \fBswign\fP command\&.
.PP
.nf
\f(CW     export SWPACKAGEPASSFD
     SWPACKAGEPASSFD=agent
     export GNUPGNAME
     GNUPGNAME="Your Name"
     swign --name-version=somepackage-1\&.1 -s PSF\&.in --no-remove @\&.\fR
.fi
.PP
 See the \fBswign\fP manual page for an example \fBPSF\&.in\fP file\&.
.SS "Package Security"
.PP
As implementation extensions, 
\fBswbis\fP supports creation and verification
of tar archives with embedded digital signatures, and cryptographic digests of
the archive (payload) and individual files\&.  The design supports multiple
signatures (each signing an identical byte stream) and offers full package life-cycle
relevance, that is, the signature and the signed bytes are transferred into the installed
catalog\&.
.SS "Extensibility"
.PP
The distribution form is extensible at the format and layout levels\&.
Additional distributor specific attributes (i\&.e\&. keywords) are allowed
in the meta-data files, and distributor specific control files are allowed
in the meta-data directory file layout\&.  The security files are implemented
as control files\&.  This allows adding new stronger cryptograpic digests in the
file layout while preserving back compatibility\&.
The format, POSIX tar, is extensible by adoption of the Extended Header Format
specified in later POSIX revisions\&.
.SS "Support for Unprivileged Users"
.PP
Support for unprivileged users is treated as a requirement\&.  \fBswpackage\fP does
not use a central repository and makes no copies of the source files\&.  The utilities
support alternate target paths and all activity is confined within the target path\&.  
\fBswinstall\fP supports the \fIlocation\fP attribute
which locates the installed files in target path but uses the installed software catalog
at the un-located target path\&.  Access to the installed software catalog can be controlled
via the catalog directory sticky bit per local administrative policy\&.
.SH "COPYING"
.PP
Swbis is a copyrighted work\&.  
Non-copyright holders may use and make copies under the terms of the GNU GPL
.SH "PRONUNCIATION"
.PP
Swbis is a concatenation of the command name prefix \&'sw\&' with the
Italian suffix \&'bis\&' meaning again, or one more time\&.
.br
.PP
.nf
\f(CW    Pronunciation: /es dub-u bis/
                  sw - bis
     POSIX packaging - Play it again, One more time\fR
.fi
.PP
.SH "APPLICABLE STANDARDS"
.PP
IEEE Std 1387\&.2-1995 (ISO/IEC 15068-2:1999),
.br
Open Group CAE C701,
.br
http://www\&.opengroup\&.org/publications/catalog/c701\&.htm
.br
.SH "SEE ALSO"
.PP
.nf
\f(CW info swbis
.br
 sw(5), swpackage(8), swbisparse(1), swign(1), swverify(8), swcopy(8)
.br
 swbis(1), swconfig(8), swlist(8), swremove(8)
.br
 \&.\&.\&./libexec/swbis/lxpsf
.br
 \&.\&.\&./libexec/swbis/arf2arf
.br
 \&.\&.\&./libexec/swbis/swbisparse
.br
 \&.\&.\&./libexec/swbis/swbistar
.br
http://www\&.gnu\&.org/software/swbis/sourcesign-1\&.2/gendocs/manual/index\&.html
.PP
.nf
\f(CW\fR
.fi
.PP
\fR
.fi
.PP
.SH "FILES"
.PP
\fB/var/lib/swbis/catalog\fP/  # The installed software catalog
.br
\fBcatalog\fP/  # The package meta-data directory
.br
\fBswdefaults\fP     # Options configuration file
.br
\fBswbisdefaults\fP  # Options configuration file
.SH "IDENTIFICATION"
 swbis(7)
 Author: Jim Lowe   Email: jhlowe at acm\&.org
 Version: 1\&.13\&.1
 Last Updated: 2008-04-18
 Copying: GNU Free Documentation License
.SH "BUGS"
.PP
Not everything is implemented yet\&.
.\" created by instant / docbook-to-man, Fri 02 Nov 2018, 20:39
